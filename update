#!/bin/sh
#
NOBOLD="\033[0m"
BOLD="\033[1m"
BLACK="\033[30m"
GREY="\033[0m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
WHITE="\033[37m"
#
syntax_check="php -l -f"
#tmp=$(mktemp /tmp/git.update.XXXXXX)
#log=$(mktemp /tmp/git.update.log.XXXXXX)
#tree=$(mktemp /tmp/git.diff-tree.XXXXXX)
#make fix for windows
tmp=/tmp/git.update.$(date +%s)
log=/tmp/git.update.log.$(date +%s)
tree=/tmp/git.diff-tree.$(date +%s)

pattern="*No syntax errors detected*"
exit_status=0
git diff-tree -r "$2" "$3" > $tree

echo
echo diff-tree:
cat $tree

while read old_mode new_mode old_sha1 new_sha1 status name
do
  # skip lines showing parent commit
  test -z "$new_sha1" && continue
  # skip deletions
  [ "$new_sha1" = "0000000000000000000000000000000000000000" ] && continue
  # Only test .php files
  if [[ $name == *.php ]] || [[ $name == *.phtml ]]
  then
    git cat-file blob $new_sha1 > $tmp
    set -o pipefail
    $syntax_check $tmp 2>&1 | sed "s|$tmp|$name|"> $log
	logcontent=$(<$log)
    if [[ $? != 0 ]] || [[ $logcontent != $pattern ]]
    then
      echo -e "${RED}#################### FILE: ${name} ####################${NOBOLD}"
      echo -e "$(cat $log | sed "s/in .* on line/in \\${RED}${name}\\${NOBOLD} on line/")" >&2
      echo -e "For more details run this: ${CYAN} git diff ${old_sha1:0:7} ${new_sha1:0:7} ${NOBOLD}" >&2 
      echo
      ((exit_status+=1))
    fi
  fi
done < $tree

rm -f $log $tmp $tree
if [[ $exit_status > 0 ]]
then
  echo "found errors in $exit_status files"
fi
exit $exit_status
